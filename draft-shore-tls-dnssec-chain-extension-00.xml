<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc1035 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc4034 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY rfc4035 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY rfc4330 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4330.xml">
<!ENTITY rfc5011 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5011.xml">
<!ENTITY rfc5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY rfc5905 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5905.xml">
<!ENTITY rfc6066 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6066.xml">
<!ENTITY rfc6698 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6698.xml">
<!ENTITY rfc7120 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7120.xml">
]>

<!-- To do: -->
<!--   check w/Adam Langley about including him as author -->
<!--   verify that "length - 16" is a valid construction -->
<!--   state machine diagram for the verification section? -->
<!--   do we need to do anything about dnae records? -->


<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="no"?>
<?rfc rfcedstyle="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc docName="draft-shore-tls-dnssec-chain-extension"
     ipr="trust200902" category="std">

<front>
  <title abbrev="TLS DNSSEC Chain Extension">
    A DNSSEC and DANE Record Validation Chain Extension for TLS
  </title>
  <author fullname="Melinda Shore" initials="M"
          surname="Shore">
    
    <organization>No Mountain Software</organization>
    <address>
      <email>melinda.shore@nomountain.net</email>
    </address>
  </author>

  <author fullname="Richard Barnes" initials="R"
          surname="Barnes">
    <organization>Mozilla</organization>
    <address>
      <email>rlb@ipv.sx</email>
    </address>
  </author>

  <author fullname="Shumon Huque" initials="S"
          surname="Huque">
    <organization>Verisign Labs</organization>
    <address>
      <email>shuque@verisign.com</email>
    </address>
  </author>

  <date year="2015" />
  <area>Security</area>
  <workgroup>TLS</workgroup>
  <abstract>
    <t>
      This draft describes a new TLS v1.2 extension for
      transport of a DNS record serialized with the DNSSEC
      signatures needed to authenticate that record.  The
      intent of this proposal is to allow TLS clients to
      perform DANE authentication of a TLS server
      certificate without needing to perform additional DNS
      record lookups.  It will typically not be used for
      general DNSSEC validation of TLS endpoint names.
    </t>
  </abstract>
</front>

<middle>
  <section title="Requirements Notation">
    <t>The key words "MUST", "MUST NOT", "REQUIRED",
    "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
    "RECOMMENDED", "MAY", and "OPTIONAL" in this document
    are to be interpreted as described
    in <xref target="RFC2119" />.</t>
  </section>


  <section title="Introduction">
    <t>
      This draft describes a new <xref target="RFC5246">TLS
      v1.2</xref> <xref target="RFC6066">extension</xref>
      for transport of a DNS record serialized with the
      <xref target="RFC4034">DNSSEC signatures</xref> needed
      to authenticate that record.  The intent of this
      proposal is to allow TLS clients to perform <xref
      target="RFC6698">DANE authentication</xref> of a TLS
      server certificate without performing
      additional DNS record lookups and incurring the
      associated latency penalty. It also provides the
      ability to avoid potential problems with TLS clients
      being unable to look up DANE records because of an
      interfering or broken middlebox on the path between
      the endpoint and a DNS server. And lastly, it allows a
      TLS client to validate DANE records itself without
      needing access to a validating DNS resolver to which
      it has a secure connection.  It will typically not be
      used for general DNSSEC validation of endpoint names,
      but is more appropriate for validation of DANE records
      such as TLSA, SMIMEA, etc.
    </t>

    <t>
      This mechanism is useful
      for TLS applications that need to address the problems
      described above, typically web browsers or VoIP and
      XMPP services. It may not be relevant for many other
      applications. For example, SMTP MTAs are usually
      located in data centers, may tolerate
      extra DNS lookup latency, are on servers where it is
      easier to provision a validating resolver, and are
      less likely to experience traffic interference from
      misconfigured middleboxes. Hence <xref
      target="DANESMTP">DANE authentication of SMTP
      MTAs</xref> is not likely to gain much advantage from
      this mechanism.
    </t>

    <t>
      The extension described here allows a TLS client to
      request in the client hello message that the DNS validation 
      chain be returned in the (extended) server hello message.
      If the server is configured for DANE authentication, then
      it performs the appropriate DNS queries, builds the validation
      chain, and returns it to the client. The
      server will usually use a previously cached validation chain, but
      it will need to rebuild it periodically as described in
      <xref target="sec_caching" />. 
      The client then authenticates the chain using a pre-configured 
      trust anchor.
    </t>

    <t>
      This specification is based on Adam Langley's earlier proposal for
      serializing DNSSEC validation chains [AGL]. It takes the principal
      idea of that proposal but modifies the implementation in a few ways. 
      It uses a TLS extension rather than stapling the chain into an X.509
      certificate. It uses a sequence of wire format DNS records instead 
      of a custom serialization format. It refers more extensively to 
      normative DNSSEC protocol documents for descriptions of how to perform
      DNSSEC validation rather than describing a validation algorithm in
      the document itself, which runs the risk of diverging later from the
      normative way. This new approach makes is easier for implementers to
      use DNS specific libraries to implement these functions, reducing
      the possibilities of implementation errors. An appendix 
      (empty in the 00 version) provides a Python code example of interfacing 
      with a DNS-specific module to perform these tasks.
    </t>

  </section> <!-- introduction -->

  <section title="DNSSEC Chain Extension">
    <section title="Protocol">

    <t>
      A client MAY include an extension of type
      "dnssec_chain" in the (extended) ClientHello.  The
      "extension_data" field of this extension MUST be
      empty.
    </t>

    <t>
      Servers receiving a "dnssec_chain" extension in the
      client hello SHOULD return a serialized validation chain
      in the extended ServerHello message, using the format
      described below.  If a server is unable to return a
      validation chain, or does not wish to return a
      validation chain, it returns an empty dnssec_chain
      structure.  As with all TLS extensions, if the server
      does not support this extension it will not return any
      validation chain.
    </t>

    <t>
      Note that any messages associated with these
      extensions that are sent during the TLS handshake MUST
      be included in the hash calculations involved in
      "Finished" messages.
    </t>
    
    </section> <!-- protocol -->

    <section title="DNSSEC Validation Chain Data">

      <t>
	The "validation_data" field of the "dnssec_chain" extension 
	is defined as an opaque TLS data structure, composed of 
	a sequence of uncompressed wire format DNS records.
      </t>

      <t>
	The "version" field of is set to 1 in the chain data format
	described by this document.
      </t>

      <figure>
        <artwork>
          struct {
              uint16 version;
              opaque validation_data&lt;0..2^16-1&gt;;
          } ValidationChain
        </artwork>
      </figure>
      
      <t>The internal structure of the validation_data field is
        opaque to TLS and will be handed off to a DNSSEC validator
        intact.  It will consist of a sequence of:</t>

      <figure>
        <artwork>
          Trust anchor DNSKEY, RRSIG(Trust anchor DNSKEY)
          For every intervening delegation:
              DS, RRSIG(DS)
              DNSKEY, RRSIG(DNSKEY)
          TLSA, RRSIG(TLSA)
        </artwork>
      </figure>

      <t>For example, for the HTTPS server at
        www.example.com, where there are zone cuts at "com."
        and "example.com.", the chain_data field would have the
	the following record sets, each with accompanying RRSIG
        records:</t>

      <figure>
        <artwork>
          . DNSKEY
          com. DS
          com. DNSKEY
          example.com. DS
          example.com. DNSKEY
          _443._tcp.www.example.com. TLSA
        </artwork>
      </figure>

      <t>[Note: check what format existing DNS libraries
        return already, like the validation_chain function in
        getdns]</t>

    </section> <!-- validation chain data -->

  </section> <!-- dnssec validation chain extension -->

  <section title="Construction of Serialized Validation Chains">

    <t>
      This section describes a possible procedure for the
      server to use to build the serialized DNSSEC chain.
    </t>

    <t>When the goal is to perform DANE authentication 
       <xref target="RFC6698" /> of the 
       server's X.509 certificate, the DNS record to be
       serialized is a TLSA record corresponding to the 
       server's domain name.
    </t>

    <t>
      The domain name of the server SHOULD be that included in
      the TLS Server Name Indication extension
      <xref target="RFC6066" /> when present. If the Server Name 
      Indication extension is not present, or if the server does not 
      recognize the provided name and wishes to proceed with the handshake 
      rather than aborting the connection, the server uses the
      domain name associated with the server IP address that the TLS
      connection arrives on.
    </t>

    <t>
      The TLSA record to be queried is constructed by prepending
      the _port and _transport labels to the domain name as described
      in <xref target="RFC6698" />, where port is the port number
      associated with the TLS server, and transport is usually "tcp"
      for TLS servers. [Question: does this specification permit use
      by DTLS servers too?]
    </t>

    <t>
      Note: In updated versions of this specification, the use of 
      other DANE style records may be described for TLS applications 
      that may make use of them.
    </t>

    <t>
      The components of the validation chain series are built by
      starting at the trust anchor DNSKEY (usually expected to be
      the DNS root trust anchor) and its corresponding RRSIG 
      signature record, and then for each intervening zone cut, 
      adding the DS record and DNSKEY records and their RRSIGs, and 
      finally the target TLSA record and RRSIG.
    </t>
    <t>
      Records in the validation chain are stored in uncompressed
      DNS wire format. DNS response packets contain wire format
      records, but domain names in them can be "compressed" as
      described in <xref target="RFC1035" /> by replacing a domain
      name or a list of trailing labels with a pointer to a prior 
      occurrence of the same name in the DNS packet. In the
      construction of the validation chain, DNS records MUST be
      uncompressed.
    </t>
    <t>
      (Note: A future version of this specification may describe
      a new format of the chain data with a new version number
      that employs a compression or optimization scheme to reduce 
      the size of the chain.)
    </t>
    <t>
      If the server acts as its own full iterative DNS resolver, 
      it can build the chain as it performs normal iterative 
      resolution of the target record. If the server uses a 
      recursive server (which is expected to be a more common case),
      it employs a slightly modified lookup algorithm. The modified
      algorithm starts at the trust anchor, gradually prepends additional
      labels and looks for DS, and DNSKEY records, until it reaches the 
      target name. Alternatively, it could start at the target name
      and walk upwards to the root, gradually stripping labels.
    </t>

  </section> <!-- construction -->


  <section title="Caching and Regeneration of the Validation Chain"
	   anchor="sec_caching">
    <t>
      DNS records have Time To Live (TTL) parameters, and DNSSEC
      signatures have validity periods (inception and expiration
      times). After the TLS server constructs the serialized validation
      chain, it SHOULD cache and reuse it in multiple TLS connection
      handshakes. However, it should keep track of the TTLs and signature
      validity periods and requery the records and rebuild the validation
      chain as needed. A server implementation could carefully track
      these parameters and requery the chain correspondingly. Alternatively, 
      it could be configured to rebuild the chain at some predefined periodic
      intervals.
    </t>
  </section>


  <section title="Validation of the Chain" anchor="sec_validation">

    <t>
      A TLS client making use of this specification, MUST have
      a DNSSEC trust anchor configured, which is usually the DNS root
      key. It MUST use the trust anchor to perform DNSSEC validation 
      of the received chain. The DNSSEC validation process is specified 
      in the <xref target="RFC4035">DNSSEC protocol</xref>. This mechanism 
      is typically implemented in a DNSSEC validation engine or library.  
      If the chain is correctly authenticated, the client then performs 
      DANE authentication of the server certificate according to the
      <xref target="RFC6698">DANE TLS protocol</xref>. A TLS client
      MUST NOT cache and reuse the contents of any received dnssec_chain
      extension for subsequent TLS connections.
    </t>

  </section> <!-- validation -->


  <section title="Trust Anchor Maintenance" anchor="sec_trustmaint">

    <t>
      The trust anchor may change periodically, e.g. due to a
      key rollover event by the operator of the initial zone. Managed 
      key rollovers typically use a process that can be tracked by 
      verifiers allowing them to automatically update their trust 
      anchors, as described in <xref target="RFC5011" />. TLS clients 
      using this specification are also expected to use such a mechanism 
      to keep their trust anchors updated. Some operating systems may 
      have a system-wide service to maintain and keep up-to-date the 
      root trust anchor.  It may be possible for the TLS client 
      application to simply reference the system wide service as 
      its trust anchor, periodically checking whether it has changed.
    </t>

  </section>


  <section title="Other Considerations" anchor="sec_other">

    <t>
      Since DNSSEC signatures have validity periods, TLS clients need 
      roughly accurate time in order to properly authenticate these 
      signatures. This could be achieved by running
      a time synchronization protocol like NTP
      <xref target="RFC5905" /> or SNTP
      <xref target="RFC4330" />,
      which are already widely used today.
    </t>

  </section> <!-- verification -->


  <section title="Security Considerations">

    <t>
      The security considerations of the normatively
      referenced RFCs (1035, 4034, 4035, 5246, 6066, 6698)
      all pertain to this extension.  As mentioned above,
      there are particular security pitfalls in creating and
      using this serialization because it has very different
      temporal qualities from the usual certificate that
      would be validated. So the requirements in 
      <xref target="sec_validation" /> of the client not caching 
      the chain, in <xref target="sec_caching" /> of the server 
      caching but rebuilding the chain afresh as TTLs and 
      signature validity periods expire, and in 
      <xref target="sec_other" /> of maintaining good clock 
      synchronization on the client are quite important for 
      avoiding risks of replay or of use of revoked certificates.
      The DNSSEC chain is transmitted in the clear in the TLS 
      handshake, and must be validated by the client as described 
      in <xref target="sec_validation" />.
    </t>

  </section>

  <section title="IANA Considerations">

    <t>This extension requires the registration of a new
      value in the TLS ExtensionsType registry.  The value
      requested from IANA is 53. If the draft is adopted by
      the WG, the authors expect to make an early allocation
      request as specified in <xref target="RFC7120"  />.</t>

  </section> <!-- iana considerations -->

  <section title="Acknowledgments">
    <t>
      Many thanks to Adam Langley for laying the groundwork
      for this extension. This document also benefited from
      discussions with and review from the following people:
      Allison Mankin, Duane Wessels, Willem Toorop, Jeff
      Hodges, and Gowri Visweswaran.
    </t>
  </section>

  <section title="Test Vectors">

    <t>
      [TO BE ADDED LATER.]
    </t>

  </section> <!-- test vectors -->


</middle>

<back>

  <references title="Normative References">
    &rfc1035;
    &rfc2119;
    &rfc4034;
    &rfc4035;
    &rfc5011;
    &rfc5246;
    &rfc6066;
    &rfc6698;
  </references>

  <references title="Informative References">
    &rfc4330;
    &rfc5905;
    &rfc7120;
    <reference anchor="AGL"
               target="https://tools.ietf.org/id/draft-agl-dane-serializechain-01.txt">
      <front>
        <title>Serializing DNS Records with DNSSEC
        Authentication</title>
        <author fullname="Adam Langley" initials="A"
                surname="Langley" />
        <organization>Google, Inc</organization>
      </front>
    </reference>
    <reference anchor="DANESMTP"
      target="https://tools.ietf.org/html/draft-ietf-dane-smtp-with-dane-19">
      <front>
        <title>SMTP Security via opportunistic DANE TLS</title>
        <author fullname="Viktor Dukhovni" initials="V" surname="Dukhovni" />
        <author fullname="Wes Hardaker" initials="W" surname="Hardaker" />
      </front>
    </reference>
  </references>

  <section title="Pseudocode example">
    <t>[code goes here]</t>
  </section> <!-- pseudocode -->

  <section title="Test vector">
    <t>[data go here]</t>
  </section> <!-- test vector -->

</back>
</rfc>
